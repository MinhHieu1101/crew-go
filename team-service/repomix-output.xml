This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.air.toml
config/config.go
go.mod
internal/controllers/team_controller.go
internal/database/postgres.go
internal/middleware/auth.go
internal/middleware/role.go
internal/models/roster.go
internal/models/team.go
internal/models/user.go
internal/routes/routes.go
internal/utils/token.go
main.go
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".air.toml">
root = "."
tmp_dir = "tmp"

[build]
  cmd = "go build -o tmp/main ."
  bin = "tmp/main"
  include_ext = ["go", "tmpl", "html"]
  exclude_dir = ["assets", "tmp", "vendor"]

[log]
  time = true
</file>

<file path="config/config.go">
package config

import (
	"os"
)

type Config struct {
	Port               string
	Host               string
	DBHost, DBPort     string
	DBUser, DBPass     string
	DBName             string
	AccessTokenSecret  string
	RefreshTokenSecret string
}

func LoadConfig() *Config {
	return &Config{
		Port:               os.Getenv("PORT"),
		Host:               os.Getenv("HOST"),
		DBHost:             os.Getenv("DB_HOST"),
		DBPort:             os.Getenv("DB_PORT"),
		DBUser:             os.Getenv("DB_USER"),
		DBPass:             os.Getenv("DB_PASS"),
		DBName:             os.Getenv("DB_NAME"),
		AccessTokenSecret:  os.Getenv("ACCESS_TOKEN_SECRET"),
		RefreshTokenSecret: os.Getenv("REFRESH_TOKEN_SECRET"),
	}
}
</file>

<file path="go.mod">
module team-service

go 1.23.0

toolchain go1.24.4

require (
	github.com/gin-gonic/gin v1.10.1
	github.com/golang-jwt/jwt/v5 v5.2.2
	github.com/google/uuid v1.6.0
	github.com/joho/godotenv v1.5.1
	gorm.io/driver/postgres v1.6.0
	gorm.io/gorm v1.30.0
)

require (
	github.com/bytedance/sonic v1.11.6 // indirect
	github.com/bytedance/sonic/loader v0.1.1 // indirect
	github.com/cloudwego/base64x v0.1.4 // indirect
	github.com/cloudwego/iasm v0.2.0 // indirect
	github.com/gabriel-vasile/mimetype v1.4.3 // indirect
	github.com/gin-contrib/sse v0.1.0 // indirect
	github.com/go-playground/locales v0.14.1 // indirect
	github.com/go-playground/universal-translator v0.18.1 // indirect
	github.com/go-playground/validator/v10 v10.20.0 // indirect
	github.com/goccy/go-json v0.10.2 // indirect
	github.com/jackc/pgpassfile v1.0.0 // indirect
	github.com/jackc/pgservicefile v0.0.0-20240606120523-5a60cdf6a761 // indirect
	github.com/jackc/pgx/v5 v5.6.0 // indirect
	github.com/jackc/puddle/v2 v2.2.2 // indirect
	github.com/jinzhu/inflection v1.0.0 // indirect
	github.com/jinzhu/now v1.1.5 // indirect
	github.com/json-iterator/go v1.1.12 // indirect
	github.com/klauspost/cpuid/v2 v2.2.7 // indirect
	github.com/kr/text v0.2.0 // indirect
	github.com/leodido/go-urn v1.4.0 // indirect
	github.com/mattn/go-isatty v0.0.20 // indirect
	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
	github.com/modern-go/reflect2 v1.0.2 // indirect
	github.com/pelletier/go-toml/v2 v2.2.2 // indirect
	github.com/rogpeppe/go-internal v1.14.1 // indirect
	github.com/twitchyliquid64/golang-asm v0.15.1 // indirect
	github.com/ugorji/go/codec v1.2.12 // indirect
	golang.org/x/arch v0.8.0 // indirect
	golang.org/x/crypto v0.39.0 // indirect
	golang.org/x/net v0.25.0 // indirect
	golang.org/x/sync v0.15.0 // indirect
	golang.org/x/sys v0.33.0 // indirect
	golang.org/x/text v0.26.0 // indirect
	google.golang.org/protobuf v1.34.1 // indirect
	gopkg.in/yaml.v3 v3.0.1 // indirect
)
</file>

<file path="internal/controllers/team_controller.go">
package controllers

import (
	"net/http"
	"team-service/internal/models"
	"team-service/internal/utils"

	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

func CreateTeam(db *gorm.DB) gin.HandlerFunc {
	return func(c *gin.Context) {
		var input struct {
			Name     string   `json:"teamName" binding:"required,min=1"`
			Managers []string `json:"managers"`
			Members  []string `json:"members"`
		}
		if err := c.ShouldBindJSON(&input); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
			return
		}

		tx := db.Begin()
		team := models.Team{Name: input.Name}
		if err := tx.Create(&team).Error; err != nil {
			tx.Rollback()
			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
			return
		}

		// Process roles
		utils.ProcessRoster(tx, team.ID, c.GetString("userID"), true)
		utils.ProcessMembers(tx, team.ID, input.Managers, "MANAGER")
		utils.ProcessMembers(tx, team.ID, input.Members, "MEMBER")

		tx.Commit()
		c.JSON(http.StatusCreated, team)
	}
}
</file>

<file path="internal/database/postgres.go">
package database

import (
	"fmt"
	"log"
	"team-service/config"
	"team-service/internal/models"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

func Connect(cfg *config.Config) *gorm.DB {
	dsn := fmt.Sprintf(
		"host=%s user=%s password=%s dbname=%s port=%s sslmode=disable TimeZone=UTC",
		cfg.DBHost, cfg.DBUser, cfg.DBPass, cfg.DBName, cfg.DBPort,
	)
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}

	if err := db.AutoMigrate(&models.User{}, &models.Team{}, &models.Roster{}); err != nil {
		log.Fatalf("AutoMigrate failed: %v", err)
	}

	return db
}

func Close(db *gorm.DB) {
	sqlDB, err := db.DB()
	if err == nil {
		_ = sqlDB.Close()
	}
}
</file>

<file path="internal/middleware/auth.go">
package middleware

import (
	"net/http"
	"strings"

	"team-service/internal/utils"

	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

func Authenticate(db *gorm.DB) gin.HandlerFunc {
	return func(c *gin.Context) {
		authHeader := c.GetHeader("Authorization")
		if authHeader == "" {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "missing Authorization header"})
			return
		}
		parts := strings.SplitN(authHeader, " ", 2)
		if len(parts) != 2 || parts[0] != "Bearer" {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "invalid Authorization format"})
			return
		}
		claims, err := utils.VerifyToken(parts[1])
		if err != nil {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": err.Error()})
			return
		}
		c.Set("userID", claims.Subject)
		c.Set("role", claims.Role)
		c.Next()
	}
}
</file>

<file path="internal/middleware/role.go">
package middleware

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

func Authorize(role string) gin.HandlerFunc {
	return func(c *gin.Context) {
		userRole := c.GetString("role")
		if userRole != role {
			c.AbortWithStatusJSON(http.StatusForbidden, gin.H{"error": "forbidden"})
			return
		}
		c.Next()
	}
}
</file>

<file path="internal/models/roster.go">
package models

import "github.com/google/uuid"

type Roster struct {
	ID       uint      `gorm:"primaryKey;autoIncrement"`
	TeamID   uint      `gorm:"not null;index"`
	UserID   uuid.UUID `gorm:"type:uuid;not null;index"`
	IsLeader bool      `gorm:"default:false"`
}
</file>

<file path="internal/models/team.go">
package models

import "time"

type Team struct {
	ID        uint     `gorm:"primaryKey;autoIncrement"`
	Name      string   `gorm:"size:255;uniqueIndex;not null"`
	Rosters   []Roster `gorm:"constraint:OnDelete:CASCADE"`
	CreatedAt time.Time
	UpdatedAt time.Time
}
</file>

<file path="internal/models/user.go">
package models

import (
	"time"

	"github.com/google/uuid"
)

type User struct {
	ID        uuid.UUID `gorm:"type:uuid;default:uuid_generate_v4();primaryKey"`
	Username  string    `gorm:"size:255;not null"`
	Email     string    `gorm:"size:255;uniqueIndex;not null"`
	Password  string    `gorm:"not null"`
	Role      string    `gorm:"type:ENUM('MANAGER','MEMBER');not null"`
	CreatedAt time.Time
	UpdatedAt time.Time
}
</file>

<file path="internal/routes/routes.go">
package routes

import (
	"team-service/internal/controllers"
	"team-service/internal/middleware"

	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

func Register(r *gin.Engine, db *gorm.DB) {
	api := r.Group("/teams")
	api.Use(middleware.Authenticate(db))

	api.POST("/", middleware.Authorize("MANAGER"), controllers.CreateTeam(db))
	api.GET("/:teamId", controllers.GetTeam(db))
	api.DELETE("/:teamId", middleware.Authorize("MANAGER"), controllers.RemoveTeam(db))
	api.POST("/:teamId/members", middleware.Authorize("MANAGER"), controllers.AddMember(db))
	api.DELETE("/:teamId/members/:memberId", middleware.Authorize("MANAGER"), controllers.RemoveMember(db))
	api.POST("/:teamId/managers", middleware.Authorize("MANAGER"), controllers.AddManager(db))
	api.DELETE("/:teamId/managers/:managerId", middleware.Authorize("MANAGER"), controllers.RemoveManager(db))
}
</file>

<file path="internal/utils/token.go">
package utils

import (
	"time"

	"github.com/golang-jwt/jwt/v5"
)

type CustomClaims struct {
	Role string `json:"role"`
	jwt.RegisteredClaims
}

func GenerateToken(userID, role, secret string, ttl time.Duration) (string, error) {
	claims := CustomClaims{
		Role: role,
		RegisteredClaims: jwt.RegisteredClaims{
			Subject:   userID,
			ExpiresAt: jwt.NewNumericDate(time.Now().Add(ttl)),
			IssuedAt:  jwt.NewNumericDate(time.Now()),
		},
	}
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	return token.SignedString([]byte(secret))
}

func VerifyToken(tokenStr string) (*CustomClaims, error) {
	token, err := jwt.ParseWithClaims(tokenStr, &CustomClaims{}, func(token *jwt.Token) (interface{}, error) {
		return []byte(GetSecret()), nil
	})
	if err != nil {
		return nil, err
	}
	if !token.Valid {
		return nil, jwt.ErrTokenUnverifiable
	}
	claims := token.Claims.(*CustomClaims)
	return claims, nil
}

func GetSecret() string {
	return "supersecret"
}
</file>

<file path="main.go">
package main

import (
	"log"
	"team-service/config"
	"team-service/internal/database"
	"team-service/internal/routes"

	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
)

func init() {
	if err := godotenv.Load("../.env"); err != nil {
		log.Println("No .env file found, using environment variables")
	}
}

func main() {
	cfg := config.LoadConfig()
	db := database.Connect(cfg)
	defer database.Close(db)

	router := gin.Default()
	routes.Register(router, db)

	addr := cfg.Host + ":" + cfg.Port
	if err := router.Run(addr); err != nil {
		log.Fatalf("Failed to run server: %v", err)
	}
}
</file>

</files>
